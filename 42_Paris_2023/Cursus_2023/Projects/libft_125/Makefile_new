# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mechard <mechard@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/08/22 13:47:46 by mechard           #+#    #+#              #
#    Updated: 2025/03/21 15:49:12 by mechard          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#======================================================
#                   VARIABLES
#======================================================

#------------------------------------------------------
# Variables globales
#------------------------------------------------------

PROJECT         = libft
NAME            = libft.a

#------------------------------------------------------
# Flags de compilation et compilateur
#------------------------------------------------------

# Flag pour inclure les headers depuis leur dossier

HDRFLAG			= -I$(HDR_LOCATION)

# Compilationpour le c++

CXXFLAGS        = -Wall -Wextra -Werror -std=c++98 -g3
CXX             = c++ $(CXXFLAGS)
CXXCOMPI		= $(CXX) $(SRCS) -o $(NAME)

# Compilationpour le c

CFLAGS			= -Wall -Wextra -Werror -g3
C				= cc $(CFLAGS) $(HDRFLAG)
CCOMPI			= $(C) $(SRCS) -o $(NAME)

#------------------------------------------------------
# Fichiers sources et headers
#------------------------------------------------------

SRCS            = $(shell find . -type f | awk 'length($$0) >= 4 && substr($$0, length($$0)-3, 4) == ".c" { print }')
HDRS            = $(shell find . -type f | awk 'length($$0) >= 4 && substr($$0, length($$0)-3, 4) == ".h" { print }')
HDR_LOCATION	= $(shell find . -type f | awk 'length($$0) >= 4 && substr($$0, length($$0)-3, 4) == ".h" { cmd="dirname "$$0; cmd | getline d; close(cmd); print d }' | sort -u)
SRC_LOCATION	= $(SRCS) $(HDRS)

#------------------------------------------------------
# Couleurs, symboles et autres variables d'affichage
#------------------------------------------------------

# Reset & style
D_COLOR         = \033[0m
BOLD            = \033[1m

# Couleurs texte
BLACK1          = \033[30m
RED1            = \033[31m
GREEN1          = \033[32m
YELLOW1         = \033[33m
BLUE1           = \033[34m
PINK1           = \033[35m
CYAN1           = \033[36m
GREY1           = \033[37m

# Couleurs de fond
BLACK2          = \033[40m
RED2            = \033[41m
GREEN2          = \033[42m
YELLOW2         = \033[43m
BLUE2           = \033[44m
PINK2           = \033[45m
CYAN2           = \033[46m
GREY2           = \033[47m

# Symboles
SUCCESS         = ‚úÖ
TELECHARGEMENT  = üîΩüîÅ
DL_FINISH       = üîΩ‚úÖ
DELETED         = üí•

# Autres variables
SILENCE         = > /dev/null 2>&1
MAKE            = make --no-print-directory -C ./
FIN             = =================$(GREEN1)END$(D_COLOR)=================\n

#------------------------------------------------------
# Variables d'affichage (pour les r√®gles begin et under_begin)
#------------------------------------------------------

LINE_WIDTH      = 37
BLOCK_SIZE      = 21
END_SPACES      = 12

#------------------------------------------------------
# (Optionnel) Variables pour la librairie
#------------------------------------------------------

LIB				= libft.a
LIB_DIR			= $(addprefix $(INC), libft/)
LIB_OBJ			= $(addprefix $(LIB_DIR), obj/)
LIB_INC			= $(addprefix $(LIB_DIR), inc/)
LIB_EXEC		= $(addprefix $(LIB_DIR), exec/)
LIB_A			= $(addprefix $(LIB_EXEC), $(LIB))
LIBRARY			= -lreadline -lncurses

#======================================================
#                   R√àGLES PRINCIPALES
#======================================================

all: $(NAME)

#------------------------------------------------------
# Compilation de l'ex√©cutable
#------------------------------------------------------

$(NAME): $(SRC_LOCATION)
ifeq ($(filter-out all $(NAME), $(MAKECMDGOALS)), )
	@$(MAKE) begin ARG3="$(MAKECMDGOALS)"
endif
	@-$(MAKE) under_begin ARG3="$(NAME)"
	@-$(C) $(HDRS) $(SRCS) -o $(NAME) > res_cmp
	@if [ ! -s res_cmp ]; then \
		rm -rf res_cmp; \
		if [ -s $(NAME) ]; then \
			echo "|$(NAME)                         : $(GREEN1)$(SUCCESS)$(D_COLOR)  |"; \
		fi; \
	elif [ -s res_cmp ]; then \
		$(MAKE) error_compi; \
	fi
	@$(MAKE) end

#------------------------------------------------------
# Nettoyage (fichiers temporaires)
#------------------------------------------------------

clean:
ifneq ($(filter-out $(COMPI),$(MAKECMDGOALS)),)
	@$(MAKE) begin ARG3="$(MAKECMDGOALS)"
endif
	@allowed="$(HDRS) $(SRCS) $(NAME) Makefile"; \
	deleted=0; \
	for file in $$(find . -type f); do \
		keep=no; \
		for a in $$allowed; do \
			if [ "$$file" = "$$a" ] || [ "$$file" = "./$$a" ]; then \
				keep=yes; \
			fi; \
		done; \
		if [ "$$keep" = "no" ]; then \
			if [ $$deleted -eq 0 ]; then \
				$(MAKE) under_begin ARG3="CLEAN"; \
				deleted=1; \
			fi; \
			rm -f $$file; \
			$(MAKE) suppr_line ARG3=$$file; \
		fi; \
	done; \
	if [ "$(MAKECMDGOALS)" != "clean" ] && [ $$deleted -eq 1 ]; then \
		printf "|                                   |\n"; \
	fi
ifeq ($(MAKECMDGOALS), clean)
	@$(MAKE) end
endif


#------------------------------------------------------
# Nettoyage complet (ex√©cutable, etc.)
#------------------------------------------------------

fclean: clean
	@if [ -f "$(NAME)" ]; then \
		$(MAKE) under_begin ARG3="FCLEAN"; \
		rm -rf $(NAME) $(SILENCE); \
		echo "|$(NAME)                         : $(RED1)$(DELETED)$(D_COLOR)  |"; \
		if [ "$(MAKECMDGOALS)" != "fclean" ]; then \
			echo "|                                   |"; \
		fi; \
	fi
ifeq ($(MAKECMDGOALS), fclean)
	@$(MAKE) end
endif

#------------------------------------------------------
# Recompilation totale
#------------------------------------------------------

re: fclean all

#======================================================
#                 AUTRES R√àGLES
#======================================================

#------------------------------------------------------
# Compilation de la librairie statique (exemple)
#------------------------------------------------------

$(LIB_A):
	@$(MAKE) $(LIB) -C $(LIB_DIR)

#------------------------------------------------------
# R√®gle d'affichage "begin"
# Affiche 37 caract√®res : "=" + bloc central (35) + "="
# Tronque ARG3 (34 + ".") si > 35, " " => "\" \"", 
# puis on centre
#------------------------------------------------------

begin:
	@if [ -z "$(ARG3)" ]; then \
		upper_arg3="\" \""; \
	elif [ "$(ARG3)" = " " ]; then \
		upper_arg3="\" \""; \
	else \
		upper_arg3=$$(echo "$(ARG3)" | tr '[:lower:]' '[:upper:]'); \
	fi; \
	arg_len=$$(echo -n "$$upper_arg3" | wc -c); \
	if [ $$arg_len -gt 35 ]; then \
		truncated_arg3=$$(echo -n "$$upper_arg3" | cut -c1-34).; \
		printf "\n="; \
		printf "$(PINK1)$$truncated_arg3$(D_COLOR)"; \
		printf "=\n|                                   |\n"; \
	else \
		leftover=$$(( 35 - arg_len )); \
		left_equals=$$(( leftover / 2 )); \
		right_equals=$$(( leftover - left_equals )); \
		printf "\n="; \
		for _ in $$(seq 1 $$left_equals); do printf "="; done; \
		printf "$(PINK1)$$upper_arg3$(D_COLOR)"; \
		for _ in $$(seq 1 $$right_equals); do printf "="; done; \
		printf "=\n|                                   |\n"; \
	fi
	@-$(MAKE) under_begin ARG3="$(PROJECT)"

#------------------------------------------------------
# R√®gle d'affichage "under_begin"
# Affiche une ligne de 37 caract√®res :
# |  + bloc central de 21 caract√®res + 12 espaces + |
# Bloc central : si ARG3 > 19 caract√®res, on tronque √† 18 caract√®res et on ajoute un point.
# Sinon, on centre ARG3 en entourant de '=' pour atteindre 21 caract√®res.
#------------------------------------------------------

under_begin:
	@if [ -z "$(ARG3)" ]; then \
		upper_arg3=" "; \
	else \
		upper_arg3=$$(echo "$(ARG3)" | tr '[:lower:]' '[:upper:]'); \
	fi; \
	upper_project=$$(echo "$(PROJECT)" | tr '[:lower:]' '[:upper:]'); \
	if [ "$$upper_arg3" = "$$upper_project" ]; then \
	    block_size=31; \
	    spaces_after=2; \
		color=$(BLUE1); \
	else \
	    block_size=21; \
	    spaces_after=12; \
		color=$(YELLOW1); \
	fi; \
	arg_len=$$(echo -n "$$upper_arg3" | wc -c); \
	printf "|  "; \
	threshold=$$(( block_size - 2 )); \
	if [ $$arg_len -gt $$threshold ]; then \
	    truncated_arg3=$$(echo -n "$$upper_arg3" | cut -c1-$$(( block_size - 3 ))).; \
	    printf "=%s=" "\\$$color$$truncated_arg3$(D_COLOR)"; \
	else \
	    leftover=$$(( block_size - arg_len )); \
	    left_equals=$$(( leftover / 2 )); \
	    right_equals=$$(( leftover - left_equals )); \
	    for _ in $$(seq 1 $$left_equals); do printf "="; done; \
	    printf "\\$$color$$upper_arg3$(D_COLOR)"; \
	    for _ in $$(seq 1 $$right_equals); do printf "="; done; \
	fi; \
	for _ in $$(seq 1 $$spaces_after); do printf " "; done; \
	printf "|\n|                                   |\n";

#------------------------------------------------------
# R√®gle d'affichage "error_line"
# Affiche une ligne de 37 caract√®res contenant ARG3 ajust√©
# sur 29 caract√®res (tronqu√© ou compl√©t√©) suivi de " : üí•  "
# pour signaler la suppression d'un fichier.
#------------------------------------------------------

suppr_line:
	@{ \
		if [ -z "$(ARG3)" ]; then \
			display_arg3="\" \""; \
		else \
			display_arg3="$(ARG3)"; \
		fi; \
		arg_len=$$(echo -n "$$display_arg3" | wc -c); \
		if [ $$arg_len -gt 28 ]; then \
			truncated=$$(echo -n "$$display_arg3" | cut -c1-27); \
			field="$$truncated."; \
		else \
			field="$$display_arg3"; \
			pad=$$((28 - arg_len)); \
			i=1; \
			while [ $$i -le $$pad ]; do \
				field="$$field "; \
				i=$$(( i + 1 )); \
			done; \
		fi; \
		printf "|%s : üí•  |\n" "$$field"; \
	}

#------------------------------------------------------
# R√®gle d'affichage "end"
#------------------------------------------------------

end:
	@printf "|                                   |\n"
	@echo "$(FIN)"

#======================================================
#              R√àGLES PHONY (obligatoires)
#======================================================

.PHONY: all clean fclean re $(NAME) $(LIB_A) begin under_begin suppr_line end